// File: backend/server.js

require("dotenv").config();
const express   = require("express");
const mongoose  = require("mongoose");
const cors      = require("cors");
const multer    = require("multer");
const path      = require("path");
const fs        = require("fs");
const { spawn } = require("child_process");
const puppeteer = require("puppeteer-extra");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
puppeteer.use(StealthPlugin());

const app = express();

// ─── MODELLER ─────────────────────────────────────────────────────────────────────
const LastRead = require("./models/LastRead");
const User     = require("./models/User");

// Basit Book modeli (title, image, pdfUrl, userId)
const Book = mongoose.model(
  "Book",
  new mongoose.Schema({
    title:  String,
    image:  String,
    pdfUrl: String,
    userId: String
  })
);

// ─── ROUTE’LER ────────────────────────────────────────────────────────────────────
const settingsRoutes = require("./routes/settings");
const analysisRoutes = require("./routes/analysis"); // “Emotion Analysis” rotaları

// ─── DİZİN AYARLARI ───────────────────────────────────────────────────────────────
const uploadsPath  = path.join(__dirname, "uploads");
const chaptersPath = path.join(__dirname, "chapters");

// Eğer “uploads” veya “chapters” klasörleri yoksa, oluştur:
if (!fs.existsSync(uploadsPath))  fs.mkdirSync(uploadsPath,  { recursive: true });
if (!fs.existsSync(chaptersPath)) fs.mkdirSync(chaptersPath, { recursive: true });

app.use(cors());
app.use(express.json());

app.use("/uploads", express.static(uploadsPath));
app.use("/chapters", express.static(chaptersPath));

// Ayarlar (user settings) rotası:
app.use("/api/settings", settingsRoutes);

// Emotion Analysis rotası (önceki kodda eklediğiniz analysis.js):
app.use("/api/analysis", analysisRoutes);

// ─── MONGODB BAĞLANTISI ───────────────────────────────────────────────────────────
mongoose
  .connect(process.env.MONGODB_URI, { family: 4 })
  .then(() => console.log("✅ MongoDB bağlantısı başarılı"))
  .catch(err => console.error("❌ MongoDB bağlantı hatası:", err.message));

// ─── MULTER (PDF UPLOAD) AYARLARI ─────────────────────────────────────────────────
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, uploadsPath),
  filename:    (req, file, cb) => cb(null, Date.now() + path.extname(file.originalname)),
});
const upload = multer({ storage });

// ─── KAYIT / GİRİŞ / PROFİL GÜNCELLEME ───────────────────────────────────────────────

// POST /api/register  → Yeni kullanıcı oluştur
app.post("/api/register", async (req, res) => {
  const { email, password, username } = req.body;
  try {
    const existing = await User.findOne({ email });
    if (existing) return res.status(409).json({ message: "Kullanıcı zaten var" });
    const newUser = new User({ email, password, username });
    await newUser.save();
    return res.status(201).json(newUser);
  } catch (err) {
    return res.status(500).json({ message: "Kayıt hatası", error: err });
  }
});

// POST /api/login  → Kullanıcı girişi (email + password)
app.post("/api/login", async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email, password });
    if (!user) return res.status(401).json({ message: "Geçersiz giriş" });
    return res.json({ userId: user._id, email: user.email, username: user.username || "Reader" });
  } catch (err) {
    return res.status(500).json({ message: "Giriş hatası", error: err });
  }
});

// PUT /api/users/:id  → Kullanıcı profil güncelleme (username, email, password)
app.put("/api/users/:id", async (req, res) => {
  const { username, email, password } = req.body;
  try {
    const update = {};
    if (username) update.username = username;
    if (email)    update.email    = email;
    if (password) update.password = password;
    const updatedUser = await User.findByIdAndUpdate(req.params.id, update, { new: true });
    if (!updatedUser) return res.status(404).json({ message: "Kullanıcı bulunamadı" });
    return res.json({
      message:  "Profil güncellendi",
      username: updatedUser.username,
      email:    updatedUser.email,
    });
  } catch (err) {
    console.error("❌ Kullanıcı güncelleme hatası:", err);
    return res.status(500).json({ message: "Güncelleme başarısız", error: err.message });
  }
});

// ─── KİTAP YÜKLEME / SPLIT-EMOTION AKIŞI ────────────────────────────────────────────

// POST /api/books  (FormData: { title, image, userId, pdf })
app.post("/api/books", upload.single("pdf"), async (req, res) => {
  const { title, image, userId } = req.body;
  const pdfUrl = req.file ? `/uploads/${req.file.filename}` : null;

  try {
    // 1) Veritabanına yeni Book kaydet:
    const book = new Book({ title, image, userId, pdfUrl });
    await book.save();

    // 2) PDF’in fiziksel path’i ve “chapters/<bookId>” klasörü:
    const fullPdfPath     = path.join(__dirname, pdfUrl);
    const bookChaptersDir = path.join(chaptersPath, book._id.toString());
    if (!fs.existsSync(bookChaptersDir)) {
      fs.mkdirSync(bookChaptersDir, { recursive: true });
    }

    console.log("📄 Split edilecek dosya:", fullPdfPath);
    console.log("📁 Hedef klasör:", bookChaptersDir);

    // 3) split_pdf_chapters.py’yi spawn ile çalıştır, env altında PYTHONIOENCODING=utf-8 ekliyoruz
    const splitter = spawn(
      "python",
      ["split_pdf_chapters.py", fullPdfPath, bookChaptersDir],
      {
        cwd: __dirname,
        env: {
          ...process.env,
          PYTHONIOENCODING: "utf-8"
        }
      }
    );

    let splitStdout = "";
    let splitStderr = "";

    splitter.stdout.on("data", (data) => {
      splitStdout += data.toString();
    });
    splitter.stderr.on("data", (data) => {
      splitStderr += data.toString();
    });

    splitter.on("close", (code) => {
      console.log("📤 SPLIT stdout:", splitStdout);
      console.error("⚠️ SPLIT stderr:", splitStderr);

      // Eğer split sırasında bir hata oluşmuşsa, yine de kitap kaydedildi:
      if (code !== 0) {
        return res.status(201).json({
          message: "Kitap eklendi ama split sırasında hata oluştu",
          error: splitStderr,
          book
        });
      }

      // 4) Bölümlendirme tamamlanınca, hemen “emotion_analysis.py <bookId>” çalıştır:
      const emotionProcess = spawn(
        "python",
        ["emotion_analysis.py", book._id.toString()],
        {
          cwd: __dirname,
          env: {
            ...process.env,
            PYTHONIOENCODING: "utf-8"
          }
        }
      );

      let emoStdout = "";
      let emoStderr = "";

      emotionProcess.stdout.on("data", (data) => {
        emoStdout += data.toString();
      });
      emotionProcess.stderr.on("data", (data) => {
        emoStderr += data.toString();
      });

      emotionProcess.on("close", (ec) => {
        console.log("😃 EMOTION stdout:", emoStdout);
        console.error("⚠️ EMOTION stderr:", emoStderr);
        if (ec !== 0) {
          console.error("[!] Emotion analiz hatası:", emoStderr);
        }
      });

      // 5) İstemciye (React tarafına) “201 Created” döneriz:
      return res.status(201).json({
        message: "Kitap başarıyla eklendi; split ve emotion analiz arka planda başlatıldı",
        book
      });
    });

  } catch (err) {
    console.error("❌ Kitap eklenemedi:", err);
    return res.status(500).json({ message: "Kitap eklenemedi", error: err.message });
  }
});

// GET /api/books?userId=… → Kullanıcının kitap listesini döner
app.get("/api/books", async (req, res) => {
  const { userId } = req.query;
  if (!userId) return res.status(400).json({ message: "userId gerekli" });
  try {
    const books = await Book.find({ userId });
    return res.json(books);
  } catch (err) {
    return res.status(500).json({ message: "Kitaplar getirilemedi", error: err });
  }
});

// GET /api/books/:id → Tek bir kitabı getir
app.get("/api/books/:id", async (req, res) => {
  try {
    const book = await Book.findById(req.params.id);
    if (!book) return res.status(404).json({ message: "Kitap bulunamadı" });
    return res.json(book);
  } catch (err) {
    return res.status(500).json({ message: "Sunucu hatası", error: err });
  }
});

// DELETE /api/books/:id → Kitabı sil
app.delete("/api/books/:id", async (req, res) => {
  try {
    await Book.findByIdAndDelete(req.params.id);
    return res.status(200).json({ message: "Kitap silindi" });
  } catch (err) {
    return res.status(500).json({ message: "Silme başarısız", error: err });
  }
});

// ─── CHAPTERS ROUTES ─────────────────────────────────────────────────────────────

// GET /api/chapters/:bookId → O kitap ID altındaki tüm .txt bölümleri (filenames) döner
app.get("/api/chapters/:bookId", (req, res) => {
  const bookDir = path.join(chaptersPath, req.params.bookId);
  if (!fs.existsSync(bookDir)) {
    return res.status(404).json({ message: "Bölümler bulunamadı" });
  }
  fs.readdir(bookDir, (err, files) => {
    if (err) return res.status(500).json({ message: "Dosyalar okunamadı" });
    const txtFiles = files.filter(f => f.endsWith(".txt")).sort();
    return res.json(txtFiles);
  });
});

// GET /api/chapters/:bookId/:filename → O dosyanın (bölüm) içeriğini döner
app.get("/api/chapters/:bookId/:filename", (req, res) => {
  const filePath = path.join(chaptersPath, req.params.bookId, req.params.filename);
  fs.readFile(filePath, "utf8", (err, content) => {
    if (err) return res.status(404).json({ message: "Bölüm bulunamadı" });
    return res.json({ content });
  });
});

// ─── IMAGE FETCH (Google Images)  ─────────────────────────────────────────────────
app.get("/api/fetchImage", async (req, res) => {
  const { query } = req.query;
  if (!query || !query.trim()) return res.status(400).json({ message: "Query gerekli." });

  let browser = null;
  try {
    browser = await puppeteer.launch({
      headless: true,
      args: ["--no-sandbox","--disable-setuid-sandbox","--disable-dev-shm-usage"],
    });
    const page = await browser.newPage();
    await page.setUserAgent(
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36"
    );
    await page.setViewport({ width: 1280, height: 800 });
    await page.goto(
      `https://www.google.com/search?tbm=isch&q=${encodeURIComponent(query)}`,
      { waitUntil: "networkidle0" }
    );
    await page.evaluate(() => window.scrollBy(0, 800));
    await new Promise(resolve => setTimeout(resolve, 1000));
    await page.waitForSelector('div[data-attrid="images universal"] img', { timeout: 15000 });

    const thumbUrls = await page.$$eval('div[data-attrid="images universal"] img', imgs =>
      imgs.map(img => img.getAttribute("src") || img.getAttribute("data-src") || "")
    );
    let finalUrl = thumbUrls.find(url => url && !url.startsWith("data:")) || thumbUrls[0];
    if (!finalUrl) throw new Error("Geçerli bir resim URL’si alınamadı.");
    return res.json({ imageUrl: finalUrl });
  } catch (err) {
    console.error("🚨 fetchImage hatası:", err);
    return res.status(500).json({ message: "Resim alınamadı.", error: err.toString() });
  } finally {
    if (browser) await browser.close();
  }
});

// ─── LASTREAD (Okuma İlerlemesi)  ─────────────────────────────────────────────────
app.post("/api/lastread/save", async (req, res) => {
  const { userId, bookId, chapter } = req.body;
  if (!userId || !bookId || !chapter) {
    return res.status(400).json({ message: "Missing required fields." });
  }
  try {
    const existing = await LastRead.findOne({ userId, bookId });
    if (existing) {
      existing.chapter   = chapter;
      existing.timestamp = Date.now();
      await existing.save();
    } else {
      await LastRead.create({ userId, bookId, chapter });
    }
    return res.status(200).json({ message: "Progress saved." });
  } catch (err) {
    console.error("❌ LastRead save failed:", err);
    return res.status(500).json({ message: "Failed to save progress." });
  }
});
app.get("/api/lastread", async (req, res) => {
  const { userId, bookId } = req.query;
  if (!userId || !bookId) {
    return res.status(400).json({ message: "Missing query parameters." });
  }
  try {
    const record = await LastRead.findOne({ userId, bookId });
    if (record) {
      return res.json({ chapter: record.chapter });
    } else {
      return res.json({ chapter: null });
    }
  } catch (err) {
    console.error("❌ LastRead fetch failed:", err);
    return res.status(500).json({ message: "Failed to fetch last read." });
  }
});
//for music
// GET /api/music/:bookId/:chapterIdx → top-10 recommendations
app.get("/api/music/:bookId/:chapterIdx", async (req, res) => {
  try {
    const { bookId, chapterIdx } = req.params;
    const analysisDir = path.join(chaptersPath, bookId, "ANALYSIS");

    // 1) find the correct emotion file
    const files = (await fs.promises.readdir(analysisDir))
      .filter(f => f.endsWith("_emotion.txt"))
      .sort();
    const idx = parseInt(chapterIdx, 10);
    if (isNaN(idx) || idx < 0 || idx >= files.length) {
      return res.status(400).json({ message: "Invalid chapter index" });
    }
    const emoFile = path.join(analysisDir, files[idx]);

    // 2) spawn book2Music.py
    const { spawn } = require("child_process");
    const py = spawn("python", ["book2Music.py", emoFile], { cwd: __dirname });
    let out = "";
    py.stdout.on("data", d => out += d);
    let err = "";
    py.stderr.on("data", d => err += d);

    py.on("close", code => {
      if (code !== 0) {
        console.error("book2Music error:", err);
        return res.status(500).json({ message: "Music recommendation failed", error: err });
      }
      let recs;
      try { recs = JSON.parse(out); }
      catch(e){
        console.error("Parse JSON:", e, out);
        return res.status(500).json({ message: "Bad JSON from book2Music" });
      }

      // 3) attach title + URL
      const enriched = recs.map(r => {
        // find matching CSV row by file_name
        const info = songInfo.find(row => row.file_name === r.file);
        return {
          ...r,
          title: info ? info["Song title"] : r.file,
          url: `/music/${r.file}`
        };
      });

      return res.json(enriched);
    });

  } catch (e) {
    console.error(e);
    res.status(500).json({ message: "Server error" });
  }
});


// ─── SUNUCU BAŞLAT ────────────────────────────────────────────────────────────────
const PORT = 5000;
app.listen(PORT, () => {
  console.log(`🚀 Sunucu http://localhost:${PORT} üzerinde çalışıyor`);
});
